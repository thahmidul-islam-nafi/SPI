/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "spi_master.v:1" *)
module spi_master(clk, reset, data_in, start, mosi, miso, sclk, cs, data_out, done);
  (* src = "spi_master.v:15" *)
  wire [2:0] _00_;
  (* src = "spi_master.v:15" *)
  wire _01_;
  (* src = "spi_master.v:15" *)
  wire [7:0] _02_;
  (* src = "spi_master.v:15" *)
  wire _03_;
  (* src = "spi_master.v:15" *)
  wire _04_;
  (* src = "spi_master.v:15" *)
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  (* src = "spi_master.v:13" *)
  reg [2:0] bit_cnt;
  (* src = "spi_master.v:2" *)
  input clk;
  (* src = "spi_master.v:9" *)
  output cs;
  reg cs;
  (* src = "spi_master.v:4" *)
  input [7:0] data_in;
  (* src = "spi_master.v:10" *)
  output [7:0] data_out;
  reg [7:0] data_out;
  (* src = "spi_master.v:11" *)
  output done;
  reg done;
  (* src = "spi_master.v:7" *)
  input miso;
  (* src = "spi_master.v:6" *)
  output mosi;
  reg mosi;
  (* src = "spi_master.v:3" *)
  input reset;
  (* src = "spi_master.v:8" *)
  output sclk;
  reg sclk;
  (* src = "spi_master.v:5" *)
  input start;
  assign _06_ = sclk ^ bit_cnt[0];
  assign _00_[0] = start ? _06_ : bit_cnt[0];
  assign _07_ = ~sclk;
  assign _08_ = bit_cnt[1] ^ bit_cnt[0];
  assign _09_ = sclk ? _08_ : bit_cnt[1];
  assign _00_[1] = start ? _09_ : bit_cnt[1];
  assign _10_ = ~(bit_cnt[1] & bit_cnt[0]);
  assign _11_ = ~(_10_ ^ bit_cnt[2]);
  assign _12_ = sclk ? _11_ : bit_cnt[2];
  assign _00_[2] = start ? _12_ : bit_cnt[2];
  assign _13_ = bit_cnt[2] ? data_in[0] : data_in[4];
  assign _14_ = bit_cnt[2] ? data_in[2] : data_in[6];
  assign _15_ = bit_cnt[1] ? _13_ : _14_;
  assign _16_ = bit_cnt[2] ? data_in[1] : data_in[5];
  assign _17_ = bit_cnt[2] ? data_in[3] : data_in[7];
  assign _18_ = bit_cnt[1] ? _16_ : _17_;
  assign _19_ = bit_cnt[0] ? _15_ : _18_;
  assign _20_ = sclk ? _19_ : mosi;
  assign _04_ = start ? _20_ : mosi;
  assign _21_ = sclk ? miso : data_out[0];
  assign _02_[0] = start ? _21_ : data_out[0];
  assign _22_ = sclk ? data_out[0] : data_out[1];
  assign _02_[1] = start ? _22_ : data_out[1];
  assign _23_ = sclk ? data_out[1] : data_out[2];
  assign _02_[2] = start ? _23_ : data_out[2];
  assign _24_ = sclk ? data_out[2] : data_out[3];
  assign _02_[3] = start ? _24_ : data_out[3];
  assign _25_ = sclk ? data_out[3] : data_out[4];
  assign _02_[4] = start ? _25_ : data_out[4];
  assign _26_ = sclk ? data_out[4] : data_out[5];
  assign _02_[5] = start ? _26_ : data_out[5];
  assign _27_ = sclk ? data_out[5] : data_out[6];
  assign _02_[6] = start ? _27_ : data_out[6];
  assign _28_ = sclk ? data_out[6] : data_out[7];
  assign _02_[7] = start ? _28_ : data_out[7];
  assign _29_ = bit_cnt[2] & ~(_10_);
  assign _30_ = _29_ & ~(_07_);
  assign _01_ = start ? _30_ : cs;
  assign _05_ = start ^ sclk;
  assign _31_ = ~((_29_ & sclk) | done);
  assign _03_ = start & ~(_31_);
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[0] <= _02_[0];
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[1] <= _02_[1];
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[2] <= _02_[2];
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[3] <= _02_[3];
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[4] <= _02_[4];
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[5] <= _02_[5];
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[6] <= _02_[6];
  (* src = "spi_master.v:15" *)
  always @(posedge clk)
      data_out[7] <= _02_[7];
  (* src = "spi_master.v:15" *)
  always @(posedge clk or posedge reset)
    if (reset)
      sclk <= 0;
    else
      sclk <= _05_;
  (* src = "spi_master.v:15" *)
  always @(posedge clk or posedge reset)
    if (reset)
      cs <= 1;
    else
      cs <= _01_;
  (* src = "spi_master.v:15" *)
  always @(posedge clk or posedge reset)
    if (reset)
      mosi <= 0;
    else
      mosi <= _04_;
  (* src = "spi_master.v:15" *)
  always @(posedge clk or posedge reset)
    if (reset)
      done <= 0;
    else
      done <= _03_;
  (* src = "spi_master.v:15" *)
  always @(posedge clk or posedge reset)
    if (reset)
      bit_cnt[0] <= 0;
    else
      bit_cnt[0] <= _00_[0];
  (* src = "spi_master.v:15" *)
  always @(posedge clk or posedge reset)
    if (reset)
      bit_cnt[1] <= 0;
    else
      bit_cnt[1] <= _00_[1];
  (* src = "spi_master.v:15" *)
  always @(posedge clk or posedge reset)
    if (reset)
      bit_cnt[2] <= 0;
    else
      bit_cnt[2] <= _00_[2];
endmodule

(* src = "spi_slave.v:1" *)
module spi_slave(clk, reset, mosi, sclk, cs, miso, data_out, data_in);
  (* src = "spi_slave.v:13" *)
  wire [2:0] _00_;
  (* src = "spi_slave.v:13" *)
  wire [7:0] _01_;
  (* src = "spi_slave.v:13" *)
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "spi_slave.v:11" *)
  reg [2:0] bit_cnt;
  (* src = "spi_slave.v:2" *)
  input clk;
  (* src = "spi_slave.v:6" *)
  input cs;
  (* src = "spi_slave.v:9" *)
  input [7:0] data_in;
  (* src = "spi_slave.v:8" *)
  output [7:0] data_out;
  reg [7:0] data_out;
  (* src = "spi_slave.v:7" *)
  output miso;
  reg miso;
  (* src = "spi_slave.v:4" *)
  input mosi;
  (* src = "spi_slave.v:3" *)
  input reset;
  (* src = "spi_slave.v:5" *)
  input sclk;
  assign _03_ = bit_cnt[2] ? data_in[0] : data_in[4];
  assign _04_ = bit_cnt[2] ? data_in[2] : data_in[6];
  assign _05_ = bit_cnt[1] ? _03_ : _04_;
  assign _06_ = bit_cnt[2] ? data_in[1] : data_in[5];
  assign _07_ = bit_cnt[2] ? data_in[3] : data_in[7];
  assign _08_ = bit_cnt[1] ? _06_ : _07_;
  assign _09_ = bit_cnt[0] ? _05_ : _08_;
  assign _02_ = cs ? miso : _09_;
  assign _00_[0] = ~(bit_cnt[0] ^ cs);
  assign _10_ = bit_cnt[1] ^ bit_cnt[0];
  assign _00_[1] = cs ? bit_cnt[1] : _10_;
  assign _11_ = bit_cnt[1] & bit_cnt[0];
  assign _12_ = _11_ ^ bit_cnt[2];
  assign _00_[2] = cs ? bit_cnt[2] : _12_;
  assign _01_[0] = cs ? data_out[0] : mosi;
  assign _01_[1] = cs ? data_out[1] : data_out[0];
  assign _01_[2] = cs ? data_out[2] : data_out[1];
  assign _01_[3] = cs ? data_out[3] : data_out[2];
  assign _01_[4] = cs ? data_out[4] : data_out[3];
  assign _01_[5] = cs ? data_out[5] : data_out[4];
  assign _01_[6] = cs ? data_out[6] : data_out[5];
  assign _01_[7] = cs ? data_out[7] : data_out[6];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[0] <= 0;
    else
      data_out[0] <= _01_[0];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[1] <= 0;
    else
      data_out[1] <= _01_[1];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[2] <= 0;
    else
      data_out[2] <= _01_[2];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[3] <= 0;
    else
      data_out[3] <= _01_[3];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[4] <= 0;
    else
      data_out[4] <= _01_[4];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[5] <= 0;
    else
      data_out[5] <= _01_[5];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[6] <= 0;
    else
      data_out[6] <= _01_[6];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      data_out[7] <= 0;
    else
      data_out[7] <= _01_[7];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      miso <= 0;
    else
      miso <= _02_;
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      bit_cnt[0] <= 0;
    else
      bit_cnt[0] <= _00_[0];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      bit_cnt[1] <= 0;
    else
      bit_cnt[1] <= _00_[1];
  (* src = "spi_slave.v:13" *)
  always @(posedge sclk or posedge reset)
    if (reset)
      bit_cnt[2] <= 0;
    else
      bit_cnt[2] <= _00_[2];
endmodule

(* top =  1  *)
(* src = "spi_top.v:1" *)
module spi_top(clk, reset, master_data_in, start, slave_data_in, miso, mosi, sclk, cs, master_data_out, done);
  (* src = "spi_top.v:2" *)
  input clk;
  (* src = "spi_top.v:10" *)
  output cs;
  (* src = "spi_top.v:12" *)
  output done;
  (* src = "spi_top.v:4" *)
  input [7:0] master_data_in;
  (* src = "spi_top.v:11" *)
  output [7:0] master_data_out;
  (* src = "spi_top.v:7" *)
  output miso;
  (* src = "spi_top.v:8" *)
  output mosi;
  (* src = "spi_top.v:3" *)
  input reset;
  (* src = "spi_top.v:9" *)
  output sclk;
  (* src = "spi_top.v:6" *)
  input slave_data_in;
  (* src = "spi_top.v:5" *)
  input start;
  (* module_not_derived = 32'd1 *)
  (* src = "spi_top.v:14" *)
  spi_master master (
    .clk(clk),
    .cs(cs),
    .data_in(master_data_in),
    .data_out(master_data_out),
    .done(done),
    .miso(miso),
    .mosi(mosi),
    .reset(reset),
    .sclk(sclk),
    .start(start)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "spi_top.v:27" *)
  spi_slave slave (
    .clk(clk),
    .cs(cs),
    .data_in({ 7'h00, slave_data_in }),
    .data_out(),
    .miso(miso),
    .mosi(mosi),
    .reset(reset),
    .sclk(sclk)
  );
endmodule
